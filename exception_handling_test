def display_park_details # with 404 error handling
  puts ""
  puts "Please enter the number of the park you'd like to explore."
  puts ""
  input = gets.chomp
  p = FindaPark::Park.all[input.to_i - 1]

  begin
    info_url = p.info_url
    open(info_url)

  rescue OpenURI::HTTPError => e

    if e.message == '404 Not Found'
      puts "Our apologies - there is no further infomation on this park."
      puts p.name
      puts p.catch_phrase
      puts p.blurb # + Read More ???  #

    else
      next
      puts p.name
      puts p.catch_phrase
      puts p.blurb # + Read More ???  #
      puts ""
      puts p.season_info
      puts p.hours
      puts ""
      puts p.contact
    end

  end
end

def add_hours_seasons_to_parks # works but prematurely - needs to check for valid only once park is chosen via display_park_details
  FindaPark::Park.all.each do |p|
      begin
      info_url = p.info_url
      doc = open(info_url)
    rescue OpenURI::HTTPError => e
      if e.message == '404 Not Found'
        puts "Our apologies - there is no further infomation on this park."
      else
        next
        info_hash = FindaPark::Scraper.hours_seasons_scraper(info_url)
        p.add_hours_seasons(info_hash)
      end
    end
  end
end


def valid_url?
  urls.each do |url|
    begin
      doc = open(url)
    rescue Timeout::Error
      puts "The request for a page at #{url} timed out...skipping."
      next
    rescue OpenURI::Error => e
      puts "The request for a page at #{url} returned an error. #{e.message}"
      next
    end
  end

  doc = open(info_url)
rescue doc.OpenURI::Error => e
  e.message == '404 Not Found'
  puts "Our apologies - there is no further infomation on this park."
  next

  url = 'http://yoursite/page/38475'
begin
  file = open(url)
  doc = Nokogiri::HTML(file) do
    # handle doc
  end
rescue OpenURI::HTTPError => e
  if e.message == '404 Not Found'
    # handle 404 error
  else
    raise e
  end


  # def valid_url?(info_url)
  #   begin
  #     doc = Nokogiri::HTML(open(info_url)) do
  #       puts "Checking URL"
  #     end
  #   rescue OpenURI::HTTPError => e
  #     if e.message == '404 Not Found'
  #       false
  #     elsif OpenURI::HTTPError.message != '404 Not Found'
  #       true
  #     end
  #   end
  # end



    # def detect_empty_string_or_nil
    #   p.instance_variables.each do |v|
    #     if v == "" || v == nil
    #       puts "NA"
    #     else
    #       puts wrap("#{p.v}")
    #     end
    #   end
    # end


  # if p.attribute == "" --> puts "NA"

  # if p.attribute == "" --> puts nil

  # if p.attribute == "" || nil --> puts "NA"



  # puts p.name == "" ? (puts "NA") : p.name.bold - empty string? "NA"

  # puts p.catch_phrase == "" ? nil : p.catch_phrase.italic - empty string?  nil

  # == "" || nil ? (puts "NA"): p.hours - empty string or "nil"? "NA"




  ### Notes

  ## !!!!! Turn the '== "" ? (puts "NA") || "nil" : p.hours # "nil" necessary when the info_url doesn't exist for a park' into its own method, using .instance_variables?

  # what to do when no info link (link == nil I think)? ex. # info_url error american samoa park 1 BECAUSE THERE IS NONE
  # what to do when one of the instance variables is nil (because the giant space is terrible) puts ""
  # object.instance_variable_get(:@a)    #=> "cat"
  # object.instance_variable_get("@b")   #=> 99

  #object.instance_variables #=> @name etc.

  # Florida/10 crazy location formatting


  # check 10/32/34 #### How to get rid of empty string/nil vertical space
